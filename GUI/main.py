#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.14
# In conjunction with Tcl version 8.6
#    Jul 11, 2018 05:57:29 PM

import sys
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from statsmodels.tsa.arima_model import ARIMA
try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import support_file

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = Commodity_Price_Forecasting (root)
    support_file.init(root, top)
    root.mainloop()

w = None
def create_Commodity_Price_Forecasting(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = Commodity_Price_Forecasting (w)
    support_file.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Commodity_Price_Forecasting():
    global w
    w.destroy()
    w = None


class Commodity_Price_Forecasting:
    
    def find_best_price(self):
        file = root.filename
        direc,file = os.path.split(file)
        #print(direc)
        maxMarket=""
        maxprice=0
        for market in os.listdir(direc):
            #print(market)
            df = pd.read_csv(direc+"/"+file)
            price = df['MODALPRICE']
            lnprice=np.log(price)
            price_matrix=lnprice.as_matrix()
            model = ARIMA(price_matrix, order=(0,1,0))
            model_fit = model.fit(disp=0)
            rows,coloums=df.shape
            predictions=model_fit.predict(rows, rows+6, typ='levels')
            predictionsadjusted=np.exp(predictions)
            maxprediction=0.0000000
            for i in range(6):
                if predictionsadjusted[i] > maxprediction:
                    maxprediction=predictionsadjusted[i]
            if maxprice < maxprediction:
                maxprice=maxprediction
                maxMarket=market
        root.filename=direc+"/"+maxMarket
        self.Scrolledtext1.insert(INSERT, "--------------------------------------------Showing the Best Price-------------------------------------------- \n")
        self.arima_short()

    def arima_short(self):
        file = root.filename
        df = pd.read_csv(file)
        price = df['MODALPRICE']
        lnprice=np.log(price)
        price_matrix=lnprice.as_matrix()
        model = ARIMA(price_matrix, order=(0,1,0))
        model_fit = model.fit(disp=0)
        print(model_fit.summary())
        self.Scrolledtext1.insert(INSERT, "--------------------------------------------Price of Selected Commodity are forecasted as follows for next 6 Days-------------------------------------------- \n")
        rows,coloums=df.shape
        predictions=model_fit.predict(rows, rows+6, typ='levels')
        #predictions
        predictionsadjusted=np.exp(predictions)
        self.output_framing()
        #self.Scrolledtext1.insert(INSERT,predictionsadjusted)
        #predictionsadjusted
        plt.plot(predictionsadjusted)
        plt.title('Forecasted Prices')
        plt.show()
        #print(predictionsadjusted)
        for i in range(0,6):
            self.Scrolledtext1.insert(INSERT,str(i+1)+", January 2018 : "+str(predictionsadjusted[i])+" inr \n")
        
    def arima_long(self):
        file = root.filename
        df = pd.read_csv(file)
        price = df['MODALPRICE']
        lnprice=np.log(price)
        price_matrix=lnprice.as_matrix()
        model = ARIMA(price_matrix, order=(5,1,1))
        model_fit = model.fit(disp=0)
        print(model_fit.summary())
        self.Scrolledtext1.insert(INSERT, "--------------------------------------------Price of Selected Commodity are forecasted as follows for the next month-------------------------------------------- \n")
        rows,coloums=df.shape
        predictions=model_fit.predict(rows, rows+30, typ='levels')
        #predictions
        predictionsadjusted=np.exp(predictions)
        self.output_framing()
        #self.Scrolledtext1.insert(INSERT,predictionsadjusted)
        #predictionsadjusted
        plt.plot(predictionsadjusted)
        plt.title('Forecasted Prices')
        plt.show()
        #print(predictionsadjusted)
        for i in range(30):
            self.Scrolledtext1.insert(INSERT,str(i+1)+", January 2018 : "+str(predictionsadjusted[i])+" inr \n")
        
    def output_framing(self):
        string=root.filename
        state=""
        commodity=""
        mandi=""
        x,mandi=os.path.split(root.filename)
        x,commodity=os.path.split(x)
        x,state=os.path.split(x)
        self.Scrolledtext1.insert(INSERT,"STATE  : "+state+"\n")
        self.Scrolledtext1.insert(INSERT,"COMMODITY  : "+commodity+"\n")
        self.Scrolledtext1.insert(INSERT,"MANDI  : "+mandi+"\n")
    
    def browse_button(self):
        # Allow user to select a directory and store it in global var
        # called folder_path
            global folder_path
           # print("--------------------------------------------------gg\n\n\n\n\n")
        
            root.filename = askopenfilename(initialdir = "D:\\D:\\Project data\\currentlyWorking\\6. Schemas",title = "Select file",filetypes = [ ("Comma Separated File","*.csv") ] )
            #folder_path.set(filename)
            self.Label2.configure(text="  "+root.filename)
            print (root.filename)
            
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font13 = "-family Arial -size 10 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
        font14 = "-family Arial -size 19 -weight normal -slant italic "  \
            "-underline 1 -overstrike 0"
        font15 = "-family Arial -size 10 -weight normal -slant italic "  \
            "-underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 9 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1374x770+225+132")
        top.title("Commodity Price Forecasting")
        top.configure(background="#d9d9d9")



        self.Canvas1 = Canvas(top)
        self.Canvas1.place(relx=-0.01, rely=-0.01, relheight=1.03, relwidth=1.01)

        self.Canvas1.configure(background="#d9d9d9")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief=RIDGE)
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(selectforeground="black")
        self.Canvas1.configure(width=1393)

        self.Label1 = Label(self.Canvas1)
        self.Label1.place(relx=0.01, rely=0.04, height=47, width=192)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font14)
        self.Label1.configure(foreground="#565656")
        self.Label1.configure(text='''Homepage''')
        self.Label1.configure(width=202)

        self.Label2 = Label(self.Canvas1)
        self.Label2.place(relx=0.02, rely=0.15, height=36, width=1324)
        self.Label2.configure(anchor=W)
        self.Label2.configure(background="#ffffff")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#595959")
        self.Label2.configure(text='''Choose a .csv file !''')
        self.Label2.configure(width=1323)

        self.Button1 = Button(self.Canvas1)
        self.Button1.place(relx=0.84, rely=0.22, height=33, width=179)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(command=self.browse_button)
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(font=font13)
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''browse files''')
        self.Button1.configure(width=166)

        self.Button2 = Button(self.Canvas1)
        self.Button2.place(relx=0.8, rely=0.62, height=31, width=200)
        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(command=self.find_best_price)
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(font=font13)
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Find Best Price''')
        self.Button2.configure(width=197)

        self.Button3 = Button(self.Canvas1)
        self.Button3.place(relx=0.8, rely=0.82, height=31, width=200)
        self.Button3.configure(activebackground="#d9d9d9")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(command=self.arima_long)
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(font=font13)
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Get 30 Days Forecast''')
        self.Button3.configure(width=194)

        self.Button4 = Button(self.Canvas1)
        self.Button4.place(relx=0.8, rely=0.72, height=31, width=200)
        self.Button4.configure(activebackground="#d9d9d9")
        self.Button4.configure(activeforeground="#000000")
        self.Button4.configure(background="#d9d9d9")
        self.Button4.configure(command=self.arima_short)
        self.Button4.configure(disabledforeground="#a3a3a3")
        self.Button4.configure(font=font13)
        self.Button4.configure(foreground="#000000")
        self.Button4.configure(highlightbackground="#d9d9d9")
        self.Button4.configure(highlightcolor="black")
        self.Button4.configure(pady="0")
        self.Button4.configure(text='''Get 6 Days Forecast''')
        self.Button4.configure(width=200)

        self.Scrolledtext1 = ScrolledText(self.Canvas1)
        self.Scrolledtext1.place(relx=0.02, rely=0.38, relheight=0.58
                , relwidth=0.68)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font=font9)
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(selectforeground="black")
        self.Scrolledtext1.configure(width=10)
        self.Scrolledtext1.configure(wrap=NONE)

        self.Label3 = Label(self.Canvas1)
        self.Label3.place(relx=0.01, rely=0.34, height=26, width=172)
        self.Label3.configure(anchor=W)
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font=font15)
        self.Label3.configure(foreground="#6b6b6b")
        self.Label3.configure(text='''Output Shows Here !''')
        self.Label3.configure(width=172)

        self.Label3_1 = Label(self.Canvas1)
        self.Label3_1.place(relx=0.8, rely=0.54, height=26, width=172)
        self.Label3_1.configure(activebackground="#f9f9f9")
        self.Label3_1.configure(activeforeground="black")
        self.Label3_1.configure(anchor=W)
        self.Label3_1.configure(background="#d9d9d9")
        self.Label3_1.configure(disabledforeground="#a3a3a3")
        self.Label3_1.configure(font=font15)
        self.Label3_1.configure(foreground="#6b6b6b")
        self.Label3_1.configure(highlightbackground="#d9d9d9")
        self.Label3_1.configure(highlightcolor="black")
        self.Label3_1.configure(text='''Choose Any Option !''')





# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()



